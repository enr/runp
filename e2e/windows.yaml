preconditions:
  fs:
    - file: ../bin/runp
      ext:
        windows: .exe
specs:
  help:
    command:
      working_dir: ..
      exe: bin/runp
      ext:
        windows: .exe
      args:
        - "--help"
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - NAME
            - USAGE
            - COMMANDS
            - OPTIONS
        stderr:
          is_empty: true
  version:
    command:
      working_dir: ..
      exe: bin/runp
      ext:
        windows: .exe
      args:
        - "--version"
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            # TODO: come inserire version precisa?
            - runp version
            - Revision
            - Build date
        stderr:
          is_empty: true
  no-args:
    command:
      working_dir: ..
      exe: bin/runp
      ext:
        windows: .exe
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - USAGE
            - VERSION
            - COMMANDS
        stderr:
          is_empty: true
  env_vars:
    description: env vars are used
    command:
      working_dir: ..
      exe: bin/runp
      ext:
        windows: .exe
      args:
        - "up"
        - "--file"
        - "examples/Runpfile-env-win.yml"
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - __foo-env-is-bar__
        stderr:
          is_empty: true
  subdirs:
    command:
      working_dir: ../testdata/runpfiles/subdirs/foo
      exe: ../../../../bin/runp
      args:
        - "up"
        - "--file"
        - "../runp/test.yml"
      ext:
        windows: .exe
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - testdata\runpfiles\subdirs\foo
            - testdata\runpfiles\subdirs\bar
        stderr:
          is_empty: true
  vars_in_env:
    description: vars are used for env values
    command:
      working_dir: ..
      exe: bin/runp
      args:
        - "up"
        - "--file"
        - "testdata/runpfiles/vars-in-env-win.yml"
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - this-is-test-var
        stderr:
          is_empty: true
  preconditions:
    description: check precondition
    command:
      working_dir: ..
      exe: bin/runp
      args:
        - "up"
        - "--file"
        - "testdata/runpfiles/preconditions-02.yml"
    expectations:
      status:
        equals_to: 0
      output:
        stdout:
          contains_all:
            - this-is-from-windows-unit
          contains_none:
            - this-is-from-unix-unit
        stderr:
          is_empty: true
